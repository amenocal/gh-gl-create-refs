package cmd

import (
	"fmt"
	"path/filepath"

	"github.com/amenocal/gh-gl-create-refs/pkg/csv"
	"github.com/amenocal/gh-gl-create-refs/pkg/gitlab"
	"github.com/spf13/cobra"
)

var createRefsCmd = &cobra.Command{
	Use:   "create-refs",
	Short: "Create GitLab branches from merge request references",
	Long: `Create GitLab branches based on merge request references from a CSV file or by fetching them in real-time.

This command reads merge request references (either from a CSV file generated by fetch-refs or by fetching directly) 
and creates branches in the target GitLab repository using the naming pattern 'migration-pr-<PRNumber>'.

The CSV file should contain two columns:
1. Merge request number (IID)
2. Head SHA from diff_refs

Examples:
  gh gl-create-refs create-refs --input group-project.csv --repository target-group/target-project
  gh gl-create-refs create-refs -i refs.csv -r target-group/target-project --token your_token
  gh gl-create-refs create-refs --repository source-group/source-project --target target-group/target-project --fetch
  gh gl-create-refs create-refs -r source/repo -t target/repo --fetch --base-url https://gitlab.example.com`,
	Args: cobra.NoArgs,
	RunE: runCreateRefs,
}

var (
	createInputFile     string
	createRepository    string
	createTargetRepo    string
	createGitlabToken   string
	createGitlabBaseURL string
	createFetch         bool
)

func init() {
	rootCmd.AddCommand(createRefsCmd)

	createRefsCmd.Flags().StringVarP(&createInputFile, "input", "i", "", "Input CSV file path (required unless --fetch is used)")
	createRefsCmd.Flags().StringVarP(&createRepository, "repository", "r", "", "Source GitLab repository path (used with --fetch)")
	createRefsCmd.Flags().StringVarP(&createTargetRepo, "target", "", "", "Target GitLab repository path where branches will be created (required)")
	createRefsCmd.Flags().StringVarP(&createGitlabToken, "token", "t", "", "GitLab access token (can also use GITLAB_TOKEN environment variable)")
	createRefsCmd.Flags().StringVarP(&createGitlabBaseURL, "base-url", "b", "", "GitLab base URL (default: https://gitlab.com)")
	createRefsCmd.Flags().BoolVar(&createFetch, "fetch", false, "Fetch merge requests in real-time instead of using CSV file")

	// Mark the target repository flag as required
	createRefsCmd.MarkFlagRequired("target")
}

func runCreateRefs(cmd *cobra.Command, args []string) error {
	var refs []gitlab.MergeRequestRef
	var err error

	// Validate input parameters
	if createFetch {
		if createRepository == "" {
			return fmt.Errorf("--repository is required when using --fetch")
		}
	} else {
		if createInputFile == "" {
			return fmt.Errorf("--input is required unless --fetch is used")
		}
	}

	// Create GitLab client from flags and environment
	client, err := gitlab.NewClient(createGitlabToken, createGitlabBaseURL)
	if err != nil {
		return err
	}

	if createFetch {
		// Fetch merge requests in real-time
		fmt.Printf("Fetching merge requests from %s...\n", createRepository)
		
		var fetchedRefs []gitlab.MergeRequestRef
		processor := func(ref gitlab.MergeRequestRef) error {
			fetchedRefs = append(fetchedRefs, ref)
			return nil
		}

		_, err = client.FetchMergeRequestRefsFromRepo(createRepository, createGitlabBaseURL, processor)
		if err != nil {
			return fmt.Errorf("failed to fetch merge requests: %w", err)
		}
		
		refs = fetchedRefs
		fmt.Printf("Found %d merge requests\n", len(refs))
	} else {
		// Read from CSV file
		fmt.Printf("Reading merge request references from %s...\n", createInputFile)
		
		refs, err = csv.ReadRefsFromFile(createInputFile)
		if err != nil {
			return fmt.Errorf("failed to read CSV file: %w", err)
		}
		
		fmt.Printf("Found %d merge request references in CSV file\n", len(refs))
	}

	if len(refs) == 0 {
		fmt.Printf("No merge request references found to process\n")
		return nil
	}

	// Parse target repository path
	_, targetProjectPath, err := gitlab.ParseRepoPath(createTargetRepo)
	if err != nil {
		return fmt.Errorf("failed to parse target repository path: %w", err)
	}

	fmt.Printf("Creating branches in %s...\n", targetProjectPath)

	// Create branches
	successCount := 0
	errorCount := 0

	for _, ref := range refs {
		branchName := gitlab.GenerateBranchName(ref.IID)
		
		fmt.Printf("Creating branch '%s' from SHA %s...", branchName, ref.HeadSHA)
		
		err = client.CreateBranch(targetProjectPath, branchName, ref.HeadSHA)
		if err != nil {
			fmt.Printf(" ❌ Failed: %v\n", err)
			errorCount++
		} else {
			fmt.Printf(" ✅ Created successfully\n")
			successCount++
		}
	}

	fmt.Printf("\nSummary:\n")
	fmt.Printf("✅ Successfully created: %d branches\n", successCount)
	if errorCount > 0 {
		fmt.Printf("❌ Failed: %d branches\n", errorCount)
	}
	fmt.Printf("📋 Total processed: %d merge requests\n", len(refs))

	// Get absolute path for the input file if used
	if !createFetch && createInputFile != "" {
		absPath, err := filepath.Abs(createInputFile)
		if err != nil {
			absPath = createInputFile // Fallback to relative path
		}
		fmt.Printf("📄 Input file: %s\n", absPath)
	}

	return nil
}